<script is:inline>
	const lightModePref = window.matchMedia("(prefers-color-scheme: light)");

	// Get user preference from local storage or from browser preference
	function getUserPref() {
		const storedTheme = localStorage.getItem("theme") ?? undefined;
		return storedTheme || (lightModePref.matches ? "light" : "dark");
	}

	function setTheme(newTheme) {
		if (newTheme !== "light" && newTheme !== "dark") {
			return console.log(
				`Invalid theme value '${newTheme}' received. Expected 'light' or 'dark'.`
			);
		}

		localStorage.setItem("theme", newTheme);
		const body = document.body;

		// If the current theme matches the new theme, no need to update
		if (body.getAttribute("data-theme") === newTheme) {
			return;
		}

		body.setAttribute("data-theme", newTheme);

		// Dispatch theme change event
		window.dispatchEvent(
			new CustomEvent("theme-change", {
				detail: { theme: newTheme },
			})
		);
	}

	// Initial Setup
	setTheme(getUserPref());

	// View Transitions hook to restore theme
	document.addEventListener("astro:after-swap", () => setTheme(getUserPref()));

	// Listen for theme-change custom event
	document.addEventListener("theme-change", (e) => {
		setTheme(e.detail.theme);
	});

	// Listen for prefers-color-scheme change
	lightModePref.addEventListener("change", (e) => setTheme(e.matches ? "light" : "dark"));
</script>
