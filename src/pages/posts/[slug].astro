---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "@components/layout.astro";
import Tag from "@components/tag.astro";

// MDX Components
import DateTag from "@components/date-tag.astro";
import PostContent from "@components/post/post-content.astro";
import SimilarPosts from "@src/components/similar-posts.astro";

export async function getStaticPaths() {
	const posts = await getCollection("blog");
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: { post },
	}));
}

type Props = {
	post: CollectionEntry<"blog">;
};

const { post } = Astro.props;
---

<Layout title={post.data.title} description={post.data.description}>
	<div class="flex flex-col gap-8 md:w-5/6 px-4 py-12 sm:px-8 mx-auto">
		<div class="flex flex-col gap-6 items-center justify-center max-w-screen-lg mx-auto">
			<h1 id="header" class="text-center font-black text-5xl mb-0">
				{post.data.title}
			</h1>
			<div class="flex items-center justify-center gap-2 flex-wrap">
				<DateTag date={post.data.date} />
				{post.data.tags?.map((tag) => <Tag tag={tag} />)}

				<div class="flex items-center bg-primary dark:bg-secondary dark:text-secondary-content rounded-md">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="16"
						height="16"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
						class="lucide lucide-tag text-white mx-1.5"
						><path
							d="M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"
						></path><circle cx="7.5" cy="7.5" r=".5" fill="currentColor"></circle></svg
					>
					<a
						href={post.data.author ? `/author/${post.data.authorUsername}` : '#'}
						class={`
                        flex items-center gap-1
                        pr-2.5 py-1 rounded-md text-xs text-neutral-content font-medium capitalize
                    `}
					>
						{post.data.author}
					</a>
				</div>
			</div>
			<p class="text-lg text-center -700 max-w-[480px]">{post.data.description}</p>
		</div>
		{
			post.data.cover && (
				<img
					src={`${post.data.cover}?w=1200&q=80`}
					alt="cover"
					class="w-full max-w-screen-lg mx-auto rounded-lg"
				/>
			)
		}
	</div>
	<div class="relative flex flex-col max-w-screen-lg mx-auto px-4">
		<PostContent post={post} />
	</div>

	<SimilarPosts currentPost={post} />
</Layout>

<script>
	import { annotate, annotationGroup } from "rough-notation";
	function initAnnotations() {
		const notions = document.querySelectorAll("span[data-notion-identity]");
		const annotations = new Array(notions.length).fill(0).map((_, index) => {
			const node = notions[index] as HTMLSpanElement;
			const type = node.dataset.notionType;
			const color = node.dataset.notionColor;
			const strokeWidth = node.dataset.notionStrokewidth;
			return annotate(node, {
				type: (type as "underline") ?? "underline",
				color: color ?? "red",
				animate: false,
				multiline: type === "bracket" ? false : true,
				brackets: ["left", "right"],
				strokeWidth: Number(strokeWidth) ?? 1.5,
			});
		});
		annotationGroup(annotations).show();
	}

	document.addEventListener("astro:page-load", initAnnotations);
</script>
